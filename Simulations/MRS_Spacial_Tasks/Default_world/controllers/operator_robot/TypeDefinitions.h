#pragma once
#ifndef TYPEDEFINITIONS
#define TYPEDEFINITIONS
class TypeDefinitions
{
public:
	enum ActuatorType {
		DIFFERENTIAL_DRIVE,
		ACTION_ACTUATOR,
		VIRTUAL_DIGITAL,
		VIRTUAL_PWM,
		TEXT_OUTPUT,
		FORWARD,
		BACKWARD,
		CLOCKWISE,
		COUNTER_CLOCKWISE,
		ARC_DRIVE,
		RAW_DRIVE,
		NULL_ACTUATOR,
		ACTION_IMPOSSIBLE
	};

	enum SensorType {
		SENSOR_DISTANCE_POINT,
		SENSOR_DISTANCE_ARC,
		SENSOR_DETECTOR_SECTOR,
		SENSOR_GRADIENT_FLOOR,
		SENSOR_GRADIENT,
		SENSOR_POSITION_GLOBAL,
		SENSOR_POSITION_RELATIVE,
		SENSOR_ENCODER,
		SENSOR_TEXT_INPUT,
		SENSOR_COMPLEX,
	};

	enum ViewType {
		VIEW_DISTANCE_POINT,
		VIEW_DISTANCE_ARC,
		VIEW_DETECTOR_SECTOR,
		VIEW_GRADIENT,
		VIEW_POSITION_2D,
		VIEW_VELOCITY_2D,
		VIEW_ACCELERATION_2D,
		VIEW_POSITION_3D,
		VIEW_VELOCITY_3D,
		VIEW_ACCELERATION_3D,
		VIEW_TEXT,
		VIEW_COMPLEX,
	};

	enum ConditionType {
		CONDITION_POSITION,
		CONDITION_IN_RANGE,
		CONDITION_WAIT,
		CONDITION_INPUT_TEXT_EQUALS,
		CONDITION_UNDEFINED,
		CONDITION_SUBTASK,
		CONDITION_COMPLEX,
		CONDITION_NULL
	};

	enum ExecutableBehaviour {
		BEHAVIOUR_DRIVE,
		BEHAVIOUR_SAFE_DRIVE,
		BEHAVIOUR_SEARCH,
		BEHAVIOUR_STANDBY,
		BEHAVIOUR_WAIT,
		BEHAVIOUR_SAFE_WAIT,
		BEHAVIOUR_ASK_FOR_INPUT,
		BEHAVIOUR_ADJUST
	};

	enum TaskState {
		TASK_STATE_UNKNOWN,
		TASK_IN_QUEUE,
		TASK_PREPARING,
		TASK_EXECUTING,
		TASK_COMPLETE,
		TASK_FAILED,
		TASK_IMPOSSIBLE
	};

	enum ReturnCode {
		SUCCESS,
		IN_PROGRESS,
		ERROR,
		FAIL,
		UNEXPECTED
	};

	enum UpdateType {
		QUIETLY,
		ADD,
		EDIT,
		REBUILD,
		MASTER
	};

	enum Pin {
		RX,
		TX,
		D2,
		D3,
		D4,
		D5,
		D6,
		D7,
		D8,
		D9,
		D10,
		D12,
		D13,
		
		A0,
		A1,
		A2,
		A3,
		A4,
		A5,
		A6,
		A7
	};

	enum MessageType {
		PING = 'P',
		TASK_COMPLETE_MESSAGE = 'E',
		TASK_MESSAGE = 'T',
		GPS_REQUEST = 'G',
		INVALID_MESSAGE = '0'
	};

	enum MessageType_CBAA {
		CBAA_PING = 'P',
		CBAA_TASK_COMPLETE_MESSAGE = 'E',
		CBAA_BIDS_MESSAGE = 'B',
		CBAA_TASK_MESSAGE = 'T',
		CBAA_GPS_REQUEST = 'G',
		CBAA_HANDSHAKE = 'H',
		CBAA_INVALID_MESSAGE = '0'
	};

	enum TaskType {
		TASK_ATOMIC = 'A',
		TASK_BEHAVIOUR = 'B',
		TASK_COMPLEX = 'C'
	};

	static TypeDefinitions::TaskState GetTaskState(char a) {
		switch (a) {
		case (int)TASK_FAILED: return TypeDefinitions::TASK_FAILED;
		case (int)TASK_COMPLETE: return TypeDefinitions::TASK_COMPLETE;
		default: return TypeDefinitions::TASK_STATE_UNKNOWN;
		}
	}

};
#endif
